/*Definition of singly linked list:
class ListNode {
    int val;
    ListNode next;

    ListNode() {
        val = 0;
        next = null;
    }

    ListNode(int data1) {
        val = data1;
        next = null;
    }

    ListNode(int data1, ListNode next1) {
        val = data1;
        next = next1;
    }
}
 */

 class Solution {
     public int findLengthOfLoop(ListNode head) {
        if (head == null || head.next == null)
            return 0;

        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

                 if (slow == fast) {
                     return countLength(slow);
            }
        }

            return 0;
    }
    private int countLength(ListNode nodeInLoop) {
        int count = 1;
        ListNode temp = nodeInLoop.next;

        while (temp != nodeInLoop) {
            count++;
            temp = temp.next;
        }

        return count;
    }
}

     }
 }
