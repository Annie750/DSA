 class Solution {
    public double minimiseMaxDistance(int[] arr, int k) {
        int n = arr.length;
        double maxGap = 0;
        for (int i = 0; i < n - 1; i++) {
            maxGap = Math.max(maxGap, arr[i + 1] - arr[i]);
        }
        double low = 0;
        double high = maxGap;
        double eps = 1e-6;
    while (high - low > eps) {
            double mid = (low + high) / 2;
            if (canPlace(arr, k, mid)) {
                high = mid;
            } else {
               low = mid;
            }
        }

        return high;
    }

    private boolean canPlace(int[] arr, int k, double dist) {
       int requiredStations = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            double gap = arr[i + 1] - arr[i];
            requiredStations += (int)(gap / dist);
        }
        return requiredStations <= k;
    }
}
